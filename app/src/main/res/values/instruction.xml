<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string-array name="instrString">
        <item>add</item>
        <item>addi</item>
        <item>addiu</item>
        <item>addu</item>
        <item>and</item>
        <item>andi</item>
        <item>beq</item>
        <item>blez</item>   //
        <item>bgtq</item>   //
        <item>bne</item>
        <item>div</item>    //
        <item>divu</item>   //
        <item>j</item>
        <item>jal</item>
        <item>jalr</item>   //
        <item>jr</item>
        <item>lb</item>     //
        <item>lbu</item>
        <item>lh</item>     //
        <item>lhu</item>
        <item>lui</item>
        <item>lw</item>
        <item>mfhi</item>   //
        <item>mthi</item>   //
        <item>mflo</item>   //
        <item>mtlo</item>   //
        <item>mult</item>   //
        <item>multu</item>  //
        <item>nor</item>
        <item>or</item>
        <item>ori</item>
        <item>slt</item>
        <item>slti</item>
        <item>sltiu</item>
        <item>sltu</item>
        <item>sll</item>
        <item>sllv</item>   //
        <item>srl</item>
        <item>srlv</item>   //
        <item>srav</item>   //
        <item>sra</item>    //
        <item>sb</item>
        <item>sh</item>
        <item>sw</item>
        <item>sub</item>
        <item>subu</item>
        <item>xor</item>    //
        <item>xori</item>   //
    </string-array>
    <string-array name="instrDescription">
        <item>Adds the values of two registers and stores the result in another. May cause overflow exception</item>
        <item>Adds a constant value to a register and stores the result in another register. May cause overflow exception</item>
        <item>Adds a constant value to a register and stores the result in another register. But operands are treated as unsigned i.e. no overflow exception</item>
        <item>Adds the values of two registers and stores the result in another. But operands are treated as unsigned i.e. no overflow exception</item>
        <item>Performs a bitwise AND operation between two registers, storing the result in another register.</item>
        <item>Performs a bitwise AND operation between a register and a constant value, storing the result in another register.</item>
        <item>Branches to a target label if two registers are equal.</item>
        <item>Branches to a target label if two registers are not equal.</item>
        <item>Unconditionally jumps to a target label.</item>
        <item>Unconditionally jumps and links to a target label. Will update $ra to $pc + 8</item>
        <item>Unconditionally jumps to the address specified by the register. Can be used in conjunction with $ra</item>
        <item>Loads an unsigned byte from memory into a register.</item>
        <item>Loads an unsigned halfword from memory into a register.</item>
        <item>Loads a 16-bit immediate value into the upper 16 bits of a register.</item>
        <item>Loads a word from memory into a register.</item>
        <item>Performs a bitwise NOR operation between two registers, storing the result in another register.</item>
        <item>Performs a bitwise OR operation between two registers, storing the result in another register.</item>
        <item>Performs a bitwise OR operation between a register and a constant value, storing the result in another register.</item>
        <item>Sets a register to 1 if another register is less than the other register; otherwise, sets it to 0.</item>
        <item>Sets a register to 1 if another register is less than a constant value; otherwise, sets it to 0.</item>
        <item>Sets a register to 1 if another register is less than a constant value; otherwise, sets it to 0. But operands are treated as unsigned.</item>
        <item>Sets a register to 1 if another register is less than the other register; otherwise, sets it to 0. But operands are treated as unsigned.</item>
        <item>Performs a bitwise left shift of the value of a register a constant amount of time and stores it in another register. Equivalent to multiplying by 2 a constant amount of time.</item>
        <item>Performs a bitwise right shift of the value of a register a constant amount of time and stores it in another register. Zero-extended. </item>
        <item>Stores the least significant byte of a register into memory.</item>
        <item>Stores the least significant halfword of a register into memory.</item>
        <item>Stores a word from a register into memory.</item>
        <item>Subtracts the values of two registers and stores the result in another. May cause overflow exception</item>
        <item>Subtracts the values of two registers and stores the result in another. But operands are treated as unsigned i.e. no overflow exception</item>
    </string-array>
    <string-array name="instrUsage">
        <item>add $dest, $src1, $src2 \t // $dest = $src1 + $src2</item>
        <item>addi $dest, $src, imm \t // $dest = $src + imm</item>
        <item>addiu $dest, $src, imm \t // $dest = $src + imm</item>
        <item>addu $dest, $src1, $src2 \t // $dest = $src1 + $src2</item>
        <item>and $dest, $src1, $src2 \t // $dest = $src1 and $src2</item>
        <item>andi $dest, $src, imm \t // $dest = $src and imm</item>
        <item>beq $src1, $src2, target</item>
        <item>bne $src1, $src2, target</item>
        <item>j target</item>
        <item>jal target</item>
        <item>jr $dest</item>
        <item>lbu $dest, offset($base) \t // $dest = ($base + offset)</item>
        <item>lhu $dest, offset($base) \t // $dest = ($base + offset)</item>
        <item>lui $dest, imm \t // $dest = imm sll 16 </item>
        <item>lw $dest, offset($base) \t // $dest = ($base + offset)</item>
        <item>nor $dest, $src1, $src2 \t // $dest = $src1 nor $src2</item>
        <item>or $dest, $src1, $src2 \t // $dest = $src1 or $src2</item>
        <item>ori $dest, $src, imm \t // $dest = $src or imm</item>
        <item>slt $dest, $src1, $src2 \t // $dest = ($src1 > $src2)? 1: 0</item>
        <item>slti $dest, $src, imm \t // $dest = ($src1 > imm)? 1: 0</item>
        <item>sltiu $dest, $src, imm \t // $dest = ($src1 > imm)? 1: 0</item>
        <item>sltu $dest, $src1, $src2 \t // $dest = ($src1 > $src2)? 1: 0</item>
        <item>sll $dest, $src, shamt \t // $dest = $src sll shamt</item>
        <item>srl $dest, $src, shamt \t // $dest = $src srl shamt</item>
        <item>sb $src, offset($base)</item>
        <item>sh $src, offset($base)</item>
        <item>sw $src, offset($base)</item>
        <item>sub $dest, $src1, $src2 \t // $dest = $src1 - $src2</item>
        <item>subu $dest, $src1, $src2 \t // $dest = $src1 - $src2</item>
    </string-array>
    <string-array name="regsString">
        <item>$zero</item>
        <item>$v0</item>
        <item>$a0</item>
        <item>$a1</item>
        <item>$t0</item>
        <item>$t1</item>
        <item>$t2</item>
        <item>$t3</item>
        <item>$s0</item>
        <item>$s1</item>
        <item>$sp</item>
    </string-array>
    <string-array name="template">
        <item>_</item>
        <item>\t</item>
        <item>_</item>
        <item>,\t</item>
        <item>_</item>
        <item>,\t</item>
        <item>_</item>
    </string-array>
    <string-array name="template_m">
        <item>_</item>
        <item>\t</item>
        <item>_</item>
        <item>,\t</item>
        <item>_</item>
        <item>(</item>
        <item>_</item>
        <item>)</item>
    </string-array>
    <string-array name="template_lui">
        <item>_</item>
        <item>\t</item>
        <item>_</item>
        <item>,\t</item>
        <item>_</item>
    </string-array>
    <string-array name="template_j_jr">
        <item>_</item>
        <item>\t</item>
        <item>_</item>
    </string-array>
    <string-array name="instr_r">
        <item>add</item>
        <item>addu</item>
        <item>and</item>
        <item>div</item>
        <item>divu</item>
        <item>jr</item>
        <item>jalr</item>
        <item>mfhi</item>
        <item>mthi</item>
        <item>mflo</item>
        <item>mtlo</item>
        <item>mult</item>
        <item>multu</item>
        <item>nor</item>
        <item>or</item>
        <item>slt</item>
        <item>sltu</item>
        <item>sll</item>
        <item>sllv</item>
        <item>srl</item>
        <item>srlv</item>
        <item>sra</item>
        <item>srav</item>
        <item>sub</item>
        <item>subu</item>
        <item>xor</item>
    </string-array>
    <string-array name="instr_i">
        <item>addi</item>
        <item>addiu</item>
        <item>andi</item>
        <item>beq</item>
        <item>blez</item>
        <item>bgtz</item>
        <item>bne</item>
        <item>lb</item>
        <item>lbu</item>
        <item>lh</item>
        <item>lhu</item>
        <item>lui</item>
        <item>lw</item>
        <item>ori</item>
        <item>slti</item>
        <item>sltiu</item>
        <item>sb</item>
        <item>sh</item>
        <item>sw</item>
        <item>xori</item>
    </string-array>
    <string-array name="instr_j">
        <item>j</item>
        <item>jal</item>
    </string-array>
    <string-array name="label_names">
        <item>panda:</item>
        <item>python:</item>
        <item>bunny:</item>
        <item>koala:</item>
    </string-array>
</resources>