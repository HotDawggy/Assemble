<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string-array name="instrString">
        <item>add</item>
        <item>addi</item>
        <item>addiu</item>
        <item>addu</item>
        <item>and</item>
        <item>andi</item>
        <item>beq</item>
        <item>bgtq</item>
        <item>blez</item>
        <item>bne</item>
        <item>div</item>
        <item>divu</item>
        <item>j</item>
        <item>jal</item>
        <item>jalr</item>
        <item>jr</item>
        <item>lb</item>
        <item>lbu</item>
        <item>lh</item>
        <item>lhu</item>
        <item>lui</item>
        <item>lw</item>
        <item>mfhi</item>
        <item>mflo</item>
        <item>mthi</item>
        <item>mtlo</item>
        <item>mult</item>
        <item>multu</item>
        <item>nor</item>
        <item>or</item>
        <item>ori</item>
        <item>sb</item>
        <item>sh</item>
        <item>sll</item>
        <item>sllv</item>
        <item>slt</item>
        <item>slti</item>
        <item>sltiu</item>
        <item>sltu</item>
        <item>sra</item>
        <item>srav</item>
        <item>srl</item>
        <item>srlv</item>
        <item>sub</item>
        <item>subu</item>
        <item>sw</item>
        <item>xor</item>
        <item>xori</item>
    </string-array>
    <string-array name="instrDescription">
        <item> Adds signed numbers (a = b + c)</item>
        <item> Adds a signed immediate value to a register (add immediate)</item>
        <item> Adds an unsigned immediate value to a register (add immediate unsigned)</item>
        <item> Adds unsigned numbers (a = b + c)</item>
        <item> Bitwise AND (a = b &amp; c)</item>
        <item> Bitwise AND with a signed immediate value (and immediate)</item>
        <item> Branches to the specified offset if rs equals rt (branch if equal)</item>
        <item> Branches to the specified offset if rs is greater than zero (branch if greater than zero)</item>
        <item> Branches to the specified offset if rs is less than or equal to zero (branch if less than or equal to zero)</item>
        <item> Branches to the specified offset if rs does not equal rt (branch if not equal)</item>
        <item> Divides signed numbers (a = b / c, with quotient in LO and remainder in HI)</item>
        <item> Divides unsigned numbers (a = b / c, with quotient in LO and remainder in HI)</item>
        <item> Jumps to the specified target address (jump)</item>
        <item> Jumps to the specified target address and saves the return address in $ra (jump and link)</item>
        <item> Jumps to the address in register rs and saves the return address in register rd (jump and link register)</item>
        <item> Jumps to the address in register rs (jump register)</item>
        <item> Loads a byte from memory into a register (load byte)</item>
        <item> Loads an unsigned byte from memory into a register (load byte unsigned)</item>
        <item> Loads a halfword from memory into a register (load halfword)</item>
        <item> Loads an unsigned halfword from memory into a register (load halfword unsigned)</item>
        <item> Loads an unsigned immediate value into the upper 16 bits of a register (load upper immediate)</item>
        <item> Loads a word from memory into a register (load word)</item>
        <item> Moves the value from the HI register to register rd (move from high)</item>
        <item> Moves the value from the LO register to register rd (move from low)</item>
        <item> Moves the value from register rs to the HI register (move to high)</item>
        <item> Moves the value from register rs to the LO register (move to low)</item>
        <item> Multiplies signed numbers (HI and LO registers are used for the result)</item>
        <item> Multiplies unsigned numbers (HI and LO registers are used for the result)</item>
        <item> Bitwise NOR (a = ~(b | c))</item>
        <item> Bitwise OR (a = b | c)</item>
        <item> Bitwise OR with a signed immediate value (or immediate)</item>
        <item> Stores a byte from a register to memory (store byte)</item>
        <item> Stores a halfword from a register to memory (store halfword)</item>
        <item> Shifts the bits in b to the left by c places (shift left logical)</item>
        <item> Shifts the bits in b to the left by the number of places specified in c (shift left logical variable)</item>
        <item> Sets a to 1 if b is less than c, otherwise sets a to 0 (set less than)</item>
        <item> Sets rt to 1 if rs is less than the signed immediate value, otherwise sets rt to 0 (set less than immediate)</item>
        <item> Sets rt to 1 if rs is less than the unsigned immediate value, otherwise sets rt to 0 (set less than immediate unsigned)</item>
        <item> Sets a to 1 if b is less than c (unsigned), otherwise sets a to 0 (set less than unsigned)</item>
        <item> Shifts the bits in b to the right by c places, filling with the sign bit (shift right arithmetic)</item>
        <item> Shifts the bits in b to the right by the number of places specified in c, filling with the sign bit (shift right arithmetic variable)</item>
        <item> Shifts the bits in b to the right by c places (shift right logical)</item>
        <item> Shifts the bits in b to the right by the number of places specified in c (shift right logical variable)</item>
        <item> Subtracts signed numbers (a = b - c)</item>
        <item> Subtracts unsigned numbers (a = b - c)</item>
        <item> Stores a word from a register to memory (store word)</item>
        <item> Bitwise XOR (a = b ^ c)</item>
        <item> Bitwise XOR with a signed immediate value (xor immediate)</item>
    </string-array>
    <string-array name="instrUsage">
        <item>add a b c</item>
        <item>addi rt rs imm</item>
        <item>addiu rt rs imm</item>
        <item>addu a b c</item>
        <item>and a b c</item>
        <item>andi rt rs imm</item>
        <item>beq rs rt offset</item>
        <item>bgtz rs offset</item>
        <item>blez rs offset</item>
        <item>bne rs rt offset</item>
        <item>div a b</item>
        <item>divu a b</item>
        <item>j target</item>
        <item>jal target</item>
        <item>jalr rd rs</item>
        <item>jr rs</item>
        <item>lb rt rs offset</item>
        <item>lbu rt rs offset</item>
        <item>lh rt rs offset</item>
        <item>lhu rt rs offset</item>
        <item>lui rt imm</item>
        <item>lw rt rs offset</item>
        <item>mfhi rd</item>
        <item>mflo rd</item>
        <item>mthi rs</item>
        <item>mtlo rs</item>
        <item>mult rs rt</item>
        <item>multu rs rt</item>
        <item>nor a b c</item>
        <item>or a b c</item>
        <item>ori rt rs imm</item>
        <item>sb rs rt offset</item>
        <item>sh rs rt offset</item>
        <item>sll a b c</item>
        <item>sllv a b c</item>
        <item>slt a b c</item>
        <item>slti rt rs imm</item>
        <item>sltiu rt rs imm</item>
        <item>sltu a b c</item>
        <item>sra a b c</item>
        <item>srav a b c</item>
        <item>srl a b c</item>
        <item>srlv a b c</item>
        <item>sub a b c</item>
        <item>subu a b c</item>
        <item>sw rs rt offset</item>
        <item>xor a b c</item>
        <item>xori rt rs imm</item>
    </string-array>
    <string-array name="regsString">
        <item>$zero</item>
        <item>$v0</item>
        <item>$a0</item>
        <item>$a1</item>
        <item>$t0</item>
        <item>$t1</item>
        <item>$t2</item>
        <item>$t3</item>
        <item>$s0</item>
        <item>$s1</item>
        <item>$sp</item>
    </string-array>
    <string-array name="template">
        <item>_</item>
        <item>\t</item>
        <item>_</item>
        <item>,\t</item>
        <item>_</item>
        <item>,\t</item>
        <item>_</item>
    </string-array>
    <string-array name="template_m">
        <item>_</item>
        <item>\t</item>
        <item>_</item>
        <item>,\t</item>
        <item>_</item>
        <item>(</item>
        <item>_</item>
        <item>)</item>
    </string-array>
    <string-array name="template_lui">
        <item>_</item>
        <item>\t</item>
        <item>_</item>
        <item>,\t</item>
        <item>_</item>
    </string-array>
    <string-array name="template_j_jr">
        <item>_</item>
        <item>\t</item>
        <item>_</item>
    </string-array>
    <string-array name="instr_r">
        <item>add</item>
        <item>addu</item>
        <item>and</item>
        <item>div</item>
        <item>divu</item>
        <item>jr</item>
        <item>jalr</item>
        <item>mfhi</item>
        <item>mthi</item>
        <item>mflo</item>
        <item>mtlo</item>
        <item>mult</item>
        <item>multu</item>
        <item>nor</item>
        <item>or</item>
        <item>slt</item>
        <item>sltu</item>
        <item>sll</item>
        <item>sllv</item>
        <item>srl</item>
        <item>srlv</item>
        <item>sra</item>
        <item>srav</item>
        <item>sub</item>
        <item>subu</item>
        <item>xor</item>
    </string-array>
    <string-array name="instr_i">
        <item>addi</item>
        <item>addiu</item>
        <item>andi</item>
        <item>beq</item>
        <item>blez</item>
        <item>bgtz</item>
        <item>bne</item>
        <item>lb</item>
        <item>lbu</item>
        <item>lh</item>
        <item>lhu</item>
        <item>lui</item>
        <item>lw</item>
        <item>ori</item>
        <item>slti</item>
        <item>sltiu</item>
        <item>sb</item>
        <item>sh</item>
        <item>sw</item>
        <item>xori</item>
    </string-array>
    <string-array name="instr_j">
        <item>j</item>
        <item>jal</item>
    </string-array>
    <string-array name="label_names">
        <item>Panda</item>
        <item>Python</item>
        <item>Bunny</item>
        <item>Koala</item>
        <item>Fluffy</item>
        <item>Snuggles</item>
        <item>Whiskers</item>
        <item>Puddles</item>
        <item>Cuddles</item>
        <item>Muffin</item>
        <item>Snuffles</item>
        <item>Luna</item>
        <item>Fifi</item>
        <item>Bubbles</item>
    </string-array>
</resources>