<?xml version="1.0" encoding="utf-8"?>
<resources>
    <integer-array name="opcodeKey">
        <item>0x8</item>
        <item>0x9</item>
        <item>0xc</item>
        <item>0x4</item>
        <item>0x5</item>
        <item>0x2</item>
        <item>0x24</item>
        <item>0x25</item>
        <item>0xf</item>
        <item>0x23</item>
        <item>0xd</item>
        <item>0xa</item>
        <item>0xb</item>
        <item>0x28</item>
        <item>0x29</item>
        <item>0x2b</item>
    </integer-array>>
    <string-array name="opcodeString">
        <item>addi</item>
        <item>addiu</item>
        <item>andi</item>
        <item>beq</item>
        <item>bne</item>
        <item>j</item>
        <item>lbu</item>
        <item>lhu</item>
        <item>lui</item>
        <item>lw</item>
        <item>ori</item>
        <item>slti</item>
        <item>sltiu</item>
        <item>sb</item>
        <item>sh</item>
        <item>sw</item>
    </string-array>
    <string-array name="opcodeDescription">
        <item>Adds a constant value to a register and stores the result in another register.</item>
        <item>Similar to addi, but treats operands as unsigned integers.</item>
        <item>Performs a bitwise AND operation between a register and a constant value, storing the result in another register.</item>
        <item>Branches to a target address if two registers are equal.</item>
        <item>Branches to a target address if two registers are not equal.</item>
        <item>Unconditionally jumps to a target address.</item>
        <item>Loads an unsigned byte from memory into a register.</item>
        <item>Loads an unsigned halfword from memory into a register.</item>
        <item>Loads a 16-bit immediate value into the upper 16 bits of a register.</item>
        <item>Loads a word from memory into a register.</item>
        <item>Performs a bitwise OR operation between a register and a constant value, storing the result in another register.</item>
        <item>Sets a register to 1 if another register is less than a constant value; otherwise, sets it to 0.</item>
        <item>Similar to slti, but treats operands as unsigned integers.</item>
        <item>Stores the least significant byte of a register into memory.</item>
        <item>Stores the least significant halfword of a register into memory.</item>
        <item>Stores a word from a register into memory.</item>
    </string-array>
    <string-array name="opcodeUsage">
        <item>addi $dest, $src, imm</item>
        <item>addiu $dest, $src, imm</item>
        <item>andi $dest, $src, imm</item>
        <item>beq $src1, $src2, target</item>
        <item>bne $src1, $src2, target</item>
        <item>j target</item>
        <item>lbu $dest, offset($base)</item>
        <item>lhu $dest, offset($base)</item>
        <item>lui $dest, imm</item>
        <item>lw $dest, offset($base)</item>
        <item>ori $dest, $src, imm</item>
        <item>slti $dest, $src, imm</item>
        <item>sltiu $dest, $src, imm</item>
        <item>sb $src, offset($base)</item>
        <item>sh $src, offset($base)</item>
        <item>sw $src, offset($base)</item>
    </string-array>
    <integer-array name="functKey">
        <item>0x20</item>
        <item>0x21</item>
        <item>0x24</item>
        <item>0x8</item>
        <item>0x27</item>
        <item>0x25</item>
        <item>0x2a</item>
        <item>0x2b</item>
        <item>0x00</item>
        <item>0x02</item>
        <item>0x22</item>
        <item>0x23</item>
    </integer-array>
    <string-array name="functString">
        <item>add</item>
        <item>addu</item>
        <item>and</item>
        <item>jr</item>
        <item>nor</item>
        <item>or</item>
        <item>slt</item>
        <item>sltu</item>
        <item>sll</item>
        <item>srl</item>
        <item>sub</item>
        <item>subu</item>
    </string-array>
    <integer-array name="regsKey">
        <item>-1</item>
        <item>0</item>
        <item>2</item>
        <item>4</item>
        <item>5</item>
        <item>8</item>
        <item>9</item>
        <item>16</item>
        <item>17</item>
        <item>29</item>
    </integer-array>
    <string-array name="regsString">
        <item>_</item>
        <item>$zero</item>
        <item>$v0</item>
        <item>$a0</item>
        <item>$a1</item>
        <item>$t0</item>
        <item>$t1</item>
        <item>$s0</item>
        <item>$s1</item>
        <item>$sp</item>
    </string-array>
    <string-array name="template">
        <item>_</item>
        <item>\t</item>
        <item>_</item>
        <item>,\t</item>
        <item>_</item>
        <item>,\t</item>
        <item>_</item>
    </string-array>
    <string-array name="template_m">
        <item>_</item>
        <item>\t</item>
        <item>_</item>
        <item>,\t</item>
        <item>_</item>
        <item>(</item>
        <item>_</item>
        <item>)</item>
    </string-array>
    <string-array name="template_lui">
        <item>_</item>
        <item>\t</item>
        <item>_</item>
        <item>,\t</item>
        <item>_</item>
    </string-array>
    <string-array name="template_j_jr">
        <item>_</item>
        <item>\t</item>
        <item>_</item>
    </string-array>
    <string-array name="instr_r">
        <item>add</item>
        <item>addu</item>
        <item>and</item>
        <item>nor</item>
        <item>or</item>
        <item>slt</item>
        <item>sltu</item>
        <item>sll</item>
        <item>srl</item>
        <item>sub</item>
        <item>subu</item>
    </string-array>
    <integer-array name="funct_r">
        <item>0x20</item>
        <item>0x21</item>
        <item>0x24</item>
        <item>0x27</item>
        <item>0x25</item>
        <item>0x2a</item>
        <item>0x2b</item>
        <item>0x00</item>
        <item>0x02</item>
        <item>0x22</item>
        <item>0x23</item>
    </integer-array>
    <string-array name="instr_i">
        <item>addi</item>
        <item>addiu</item>
        <item>andi</item>
        <item>beq</item>
        <item>bne</item>
        <item>lbu</item>
        <item>lhu</item>
        <item>lui</item>
        <item>lw</item>
        <item>ori</item>
        <item>slti</item>
        <item>sltiu</item>
        <item>sb</item>
        <item>sh</item>
        <item>sw</item>
    </string-array>
    <integer-array name="opcode_i">
        <item>0x8</item>
        <item>0x9</item>
        <item>0xc</item>
        <item>0x4</item>
        <item>0x5</item>
        <item>0x24</item>
        <item>0x25</item>
        <item>0xf</item>
        <item>0x23</item>
        <item>0xd</item>
        <item>0xa</item>
        <item>0xb</item>
        <item>0x28</item>
        <item>0x29</item>
        <item>0x2b</item>
    </integer-array>
    <string-array name="instr_j">
        <item>j</item>
    </string-array>
    <integer-array name="opcode_j">
        <item>0x2</item>
    </integer-array>
</resources>